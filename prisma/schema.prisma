// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique @db.VarChar(30)
  password        String           @db.VarChar(120)
  img             String?
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  ChatroomMembers ChatroomMember[]
  ChannelMembers  ChannelMember[]
  ChannelMessages ChannelMessage[]
  DirectMessages  DirectMessage[]  @relation("sender")
  DirectMessage   DirectMessage[]  @relation("receiver")
}

model Chatroom {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(30)
  createdAt DateTime  @default(now())
  Channels  Channel[]
}

model Channel {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(30)
  topic           String           @db.VarChar(30)
  createdAt       DateTime         @default(now())
  chatRoom        Chatroom         @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId      Int
  ChannelMessages ChannelMessage[]
}

model ChatroomMember {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  isAdmin Boolean @default(false)
}

model ChannelMember {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ChannelMessage {
  id        Int      @id @default(autoincrement())
  message   String
  file      String?
  image     String?
  createdAt DateTime @default(now())
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User     @relation(fields: [sendById], references: [id], onDelete: Cascade)
  sendById  Int      @map("send_by_id")
}

model DirectMessage {
  id         Int     @id @default(autoincrement())
  sender     User    @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User    @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  message    String
  file       String?
  img        String?
}
